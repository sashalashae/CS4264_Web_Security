1. To defend against SQL injections, it is important to parameterize quaries. This allows you to differentiate between what is a valid data versus malicious code. If possible, checking the input data type with expected data type can also help differentiate between valid parameters and malicious code. Finally, it is important to not give errors as feedback as it can help the attacker figure out how to implement the attack correctly.  

2. To defend against CSRF attacks, the strongest way to prevent is the use csrf tokens, commonly called synchronizer token pattern.  These are random, long, and unique strings that are used like a checksum to cross check the users session and information.  The hacker should not be able to see the session token information, performing whitelisting over blacklisting content on the site can help further prevent csrf as well.  Further expanding upon the tokens, adding a life expectancy to the tokens also improves security.  Another way is verify the HTTP referrer has the correct domain in the post request, this strategy is essentially adding a layer of redundancy to the security measures, defense in depth. Adding a CAPTCHA to verify that a human is actually the user is another method.  Disallowing get requests is another method to limit csrf attacks.

3. To defend against XSS attacks, it is important to validate and sanitize incoming data. Using whitelists of allowed characters and validating that the data matches expected input can help sanitize incoming data. Using a well-tested library for sanitization is also very usful because there are many tricks to bypass detection and it can be challenging to plan for them all. Another defense against XSS attacks is sanitizing all data before output even if the data has been previously sanitized. This can help by excluding information from the output that hackers may use to exploit the system.
